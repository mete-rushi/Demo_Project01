{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "source_data_set",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "target_dataset",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "srchash"
				},
				{
					"name": "srctrg"
				},
				{
					"name": "exists1"
				},
				{
					"name": "isActive"
				},
				{
					"name": "select1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "isinactive"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          user_id as string,",
				"          subscription as string,",
				"          price as string,",
				"          location as string,",
				"          pincode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          user_id as string,",
				"          subscription as string,",
				"          price as string,",
				"          location as string,",
				"          pincode as string,",
				"          isactive as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"source1 derive(hash = md5(user_id,subscription,price,location,pincode)) ~> srchash",
				"target derive(hash = md5(user_id,{subscription},price,{location},pincode,isactive)) ~> srctrg",
				"srchash, srctrg exists(srchash@hash == srctrg@hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(isactive = 1) ~> isActive",
				"isActive select(mapColumn(",
				"          user_id,",
				"          subscription,",
				"          price,",
				"          location,",
				"          pincode,",
				"          isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"srctrg, srchash exists(target@user_id == source1@user_id,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2, srchash exists(srctrg@hash == srchash@hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(isactive = 0) ~> isinactive",
				"isinactive alterRow(updateIf(true())) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          user_id,",
				"          subscription,",
				"          price,",
				"          location,",
				"          pincode,",
				"          isactive",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          user_id as string,",
				"          subscription as string,",
				"          price as string,",
				"          location as string,",
				"          pincode as string,",
				"          isactive as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          user_id as string,",
				"          subscription as string,",
				"          price as string,",
				"          location as string,",
				"          pincode as string,",
				"          isactive as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}